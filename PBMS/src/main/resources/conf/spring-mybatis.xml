<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:c="http://www.springframework.org/schema/c" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:util="http://www.springframework.org/schema/util" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:ehcache="http://www.springmodules.org/schema/ehcache"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-3.2.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
    http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
    http://www.springframework.org/schema/util 
    http://www.springframework.org/schema/util/spring-util-3.2.xsd
    http://www.springframework.org/schema/mvc
    http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
    http://www.springframework.org/schema/ehcache
    http://www.springframework.org/schema/ehcache/spring-ehcache-3.2.xsd">

	<description>此文件作用：配置数据库、主动扫描和注入一些bean(可配置多个数据源)</description>

	<!-- 直接引入属性文件 和自动扫描包(自动注入)，或者在spring.xml文件中引入 -->
	<!-- <context:property-placeholder location="classpath:conf/database.properties" 
		/> -->
	<!-- <context:component-scan base-package="com.pbms.*.service" /> -->

	<!-- dbcp连接池 -->
	<!-- <bean id="proxySource" class="org.apache.commons.dbcp.BasicDataSource" 
		destroy-method="close"> </bean> -->

	<!-- 配置c3p0数据源(连接oracle) -->
	<!-- <bean id="dataSourceOracle" class="com.mchange.v2.c3p0.ComboPooledDataSource" 
		destroy-method="close"> </bean> -->

	<!-- 配置druid（alibaba） 数据源（spring与mybatis连接属性）连接mysql -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<property name="driverClassName" value="${database.mysql.driverClassName}" />
		<property name="url" value="${database.mysql.url}" />
		<property name="username" value="${database.mysql.username}" />
		<property name="password" value="${database.mysql.password}" />
		<!-- 配置监控统计拦截的filters -->
		<property name="filters" value="${database.filters}" />
		<!-- 连接池最大使用连接数 -->
		<property name="maxActive" value="${database.maxActive}" />
		<!-- 初始化连接大小 -->
		<property name="initialSize" value="${database.initialSize}" />
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="${database.maxWait}" />
		<!-- 连接池最大空闲 -->
		<!-- <property name="maxIdle" value="${database.maxIdle}" /> -->
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="${database.minIdle}" />
		<property name="timeBetweenEvictionRunsMillis" value="${database.timeBetweenEvictionRunsMillis}" />
		<property name="timeBetweenLogStatsMillis" value="${database.timeBetweenLogStatsMillis}" />
		<property name="minEvictableIdleTimeMillis" value="${database.minEvictableIdleTimeMillis}" />
		<property name="validationQuery" value="${database.validationQuery}" />
		<property name="testWhileIdle" value="${database.testWhileIdle}" />
		<property name="testOnBorrow" value="${database.testOnBorrow}" />
		<property name="testOnReturn" value="${database.testOnReturn}" />
		<property name="maxOpenPreparedStatements" value="${database.maxOpenPreparedStatements}" />
		<!-- 打开removeAbandoned功能 ,自动清除无用连接 -->
		<property name="removeAbandoned" value="${database.removeAbandoned}" />
		<!-- 清除无用连接的等待时间 ,1800秒，也就是30分钟 -->
		<property name="removeAbandonedTimeout" value="${database.removeAbandonedTimeout}" />
		<!-- 关闭abanded连接时输出错误日志 -->
		<property name="logAbandoned" value="${database.logAbandoned}" />
		<!-- 连接属性:编码 -->
		<property name="connectionProperties" value="clientEncoding=UTF-8" />

		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<property name="poolPreparedStatements" value="true" />
		<property name="maxPoolPreparedStatementPerConnectionSize"
			value="20" />

	</bean>


	<!-- sessionFactory工厂:mybatis文件配置，扫描所有mapper文件(configLocation为mybatis属性mapperLocations为所有mapper) -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- p:dataSource-ref="dataSource" p:configLocation="classpath:conf/mybatis-config.xml" 
			p:mapperLocations="classpath:mapper/*.xml"> -->
		<property name="dataSource" ref="dataSource" />
		<!-- 自动扫描entity目录, 省掉Configuration.xml里的手工配置 -->
		<property name="configLocation" value="classpath:conf/mybatis-config.xml" />
		<!-- mapper和resultmap配置,或直接在mybatis配置文件中配置 ,后者如下类MapperScannerConfigurer -->
		<!-- mapperLocations和configLocation有一个即可，当需要为实体类指定别名时，可指定configLocation属性，再在mybatis总配置文件中采用mapper引入实体类映射文件 -->
		<property name="mapperLocations">
			<list>
				<value>classpath*:com/pbms/mapper/*.xml</value>
			</list>
		</property>
		<property name="configurationProperties">
            <props>
                <!-- mapUnderscoreToCamelCase属性将表中列名的下划线映射为JavaBean属性的驼峰式命名，默认为false -->
                <prop key="mapUnderscoreToCamelCase">true</prop>
            </props>
        </property>
	</bean>

	<!-- 扫描原始dao接口的实现类，该id可在dao中注解用（@Repository("boUserDao")） -->
	<bean id="boUserDao" class="com.pbms.dao.impl.BoUserDaoImpl"> <property 
		name="sqlSessionFactory" ref="sqlSessionFactory"></property> </bean>
	<bean id="baseDao" class="com.pbms.dao.impl.BaseDaoImpl"> <property 
		name="sqlSessionFactory" ref="sqlSessionFactory"></property> </bean>

	<!-- 配置sqlSessionTemplate -->
	<!-- 作用：确保session线程安全。解析：无论是多个dao使用一个SqlSessionTemplate，还是一个dao使用一个SqlSessionTemplate，SqlSessionTemplate都是 
		对应一个sqlSession，当多个web线程调用同一个dao时，它们使用的是同一个SqlSessionTemplate，也就是同一个SqlSession -->
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<!-- <constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory" /> -->
		<constructor-arg index="0" ref="sqlSessionFactory" />
		<!-- batch批处理配置(会导致insert等返回-2147482646而不是1) -->
		<!-- <constructor-arg index="1" value="BATCH" /> -->
	</bean>

	<!-- 原始的单个配置来生成Mapper接口的代理（已弃用） -->
	<!-- <bean id="userMapper" class="org.mybatis.spring.mapper.MapperFactoryBean"> 
		<property name="mapperInterface" value="com.pbms.dao.BoUserDaoImpl" /> <property 
		name="sqlSessionFactory" ref="sqlSessionFactory" /> </bean> -->

	<!-- spring与mybatis整合配置，mybatis自动装载 mapper的xml文件的dao接口（多个配置生成Mapper接口的代理） -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"
		p:basePackage="com.pbms.dao" p:sqlSessionFactoryBeanName="sqlSessionFactory" />
	<!-- <property name="basePackage" value="com.pbms.mapper" /> <property name="sqlSessionFactoryBeanName" 
		value="sqlSessionFactory" /> -->


	<!-- 对数据源进行事务管理 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
		p:dataSource-ref="dataSource" />
	<!-- <property name="dataSource" ref="dataSource" /> -->


	<!-- 开启AOP监听 只对当前配置文件有效 -->
	<aop:aspectj-autoproxy expose-proxy="true" />

	<!-- 注解方式配置事务 -->
	<!-- <tx:annotation-driven transaction-manager="transactionManager" /> -->

	<!-- 配置自定义的SqlSessionTemplate模板，注入相关配置 -->
	<!-- <bean id="sqlSessionTemplate" class="com.hoo.framework.mybatis.support.CustomSqlSessionTemplate"> 
		<constructor-arg ref="oracleSqlSessionFactory" /> <property name="targetSqlSessionFactorys"> 
		<map> <entry value-ref="oracleSqlSessionFactory" key="oracle"/> <entry value-ref="mysqlSqlSessionFactory" 
		key="mysql"/> </map> </property> </bean> -->


	<!-- 拦截器方式配置事务 -->
	<!-- AOP配置事务注解方式注入 ，定义事务建议,一般除修改、删除、更新方法外，其他方法只读，针对于service接口中命名的方法而言 -->
	<!-- 凡是在已该name开头的函数中调用的方法，全部事务管理，存在事务回滚，要成功则都执行成功 -->
	<tx:advice id="transactionAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="create*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="generate*" propagation="REQUIRED" />
			<tx:method name="modify*" propagation="REQUIRED" />
			<tx:method name="edit*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="remove*" propagation="REQUIRED" />
			<tx:method name="repair" propagation="REQUIRED" />
			<tx:method name="deleteAndRepair" propagation="REQUIRED" />
			<!--hibernate4必须配置为开启事务 否则 getCurrentSession()获取不到 -->
			<tx:method name="get*" propagation="REQUIRED" read-only="true" />
			<tx:method name="count*" propagation="REQUIRED" read-only="true" />
			<tx:method name="find*" propagation="REQUIRED" read-only="true" />
			<tx:method name="list*" propagation="REQUIRED" read-only="true" />
			<tx:method name="*" read-only="true" />
		</tx:attributes>
	</tx:advice>

	<aop:config expose-proxy="true">
		<!-- 定义切入点，扫描所有service包下的文件 -->
		<aop:pointcut id="transactionPointcut" expression="execution(* com.pbms.service..*.*(..))" />
		<!-- 把建议引用到切入点中 -->
		<aop:advisor pointcut-ref="transactionPointcut"
			advice-ref="transactionAdvice" />
	</aop:config>


	<!-- 配置druid监控spring jdbc -->
	<!-- <bean id="druid-stat-interceptor" class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor"> 
		</bean> <bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut" 
		scope="prototype"> <property name="patterns"> <list> <value>com.pbms.service.impl</value> 
		</list> </property> </bean> <aop:config> <aop:advisor advice-ref="druid-stat-interceptor" 
		pointcut-ref="druid-stat-pointcut" /> </aop:config> -->

</beans>