<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
				        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
				        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd 
				        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
				        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd">

	<!-- 隐式地向 Spring容器注册AutowiredAnnotationBeanPostProcessor、RequiredAnnotationBeanPostProcessor、 
		CommonAnnotationBeanPostProcessor以及PersistenceAnnotationBeanPostProcessor这4个BeanPostProcessor -->
	<context:annotation-config />
	<!--下面的配置项其实也包含了自动注入上述processor的功能，因此当使用<context:component-scan/>后，即可将<context:annotation-config/>省去 -->

	<!-- 自动扫描:Spring 只负责初始化dao与Service的注解，由spring管理service可以使事务配置生效 -->
	<!-- 作用：注册被@Component，@Controller，@Service，@Repository等注解标记的组件。 -->
	<context:component-scan base-package="com.pbms.service" />


	<!-- 通过spring工厂引入jdbc数据库配置文件 -->
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE" />
		<property name="ignoreResourceNotFound" value="true" />
		<property name="locations">
			<list>
				<value>classpath:conf/database.properties</value>
			</list>
		</property>
		<property name="fileEncoding">
			<value>UTF-8</value>
		</property>
	</bean>

	<!-- 引入spring整合mybatis的文件，也可直接在web.xml文件中加载引入 -->
	<import resource="classpath:conf/spring-mybatis.xml" />

	<!-- 配置验证码生成器 -->
	<bean id="captchaProducer" class="com.google.code.kaptcha.impl.DefaultKaptcha">
		<property name="config">
			<bean class="com.google.code.kaptcha.util.Config">
				<constructor-arg>
					<props>
						<!-- 边框设置 yes no -->
						<prop key="kaptcha.border">no</prop>
						<!-- 边框颜色 颜色名称 例如：red blue black等 也可以是 RGB：105,179,90 -->
						<prop key="kaptcha.border.color">105,179,90</prop>
						<!-- 边框宽度 -->
						<prop key="kaptcha.border.thickness">5</prop>
						<!-- 产生验证码的字符源头（可以包含中文） -->
						<prop key="kaptcha.textproducer.char.string">
							1234567890qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM
						</prop>
						<!-- 生成结果的字符个数 -->
						<prop key="kaptcha.textproducer.char.length">4</prop>
						<!-- 生成结果的字符字体 -->
						<prop key="kaptcha.textproducer.font.names">微软雅黑,宋体,楷体</prop>
                        <!-- <prop key="kaptcha.textproducer.font.names">new Font("Arial", 1, fontSize), new Font("Courier", 1, fontSize)</prop> -->
						<!-- 生成结果的字符 颜色 -->
						<prop key="kaptcha.textproducer.font.color">red</prop>
						<!-- 验证码图片宽度 -->
						<prop key="kaptcha.image.width">100</prop>
						<!-- 生成结果的字符大小 -->
						<prop key="kaptcha.textproducer.font.size">40</prop>
						<!-- 验证码图片高度 -->
						<prop key="kaptcha.image.height">45</prop>
						<!-- 生成结果的字符 字间距 -->
						<prop key="kaptcha.textproducer.char.space">2</prop>
						<!-- 干扰线 生成器 -->
						<!-- <prop key="kaptcha.noise.impl">com.google.code.kaptcha.impl.DefaultNoise</prop> -->
                        <prop key="kaptcha.noise.impl">com.google.code.kaptcha.impl.NoNoise</prop>
						<!-- 干扰线 颜色 -->
						<prop key="kaptcha.noise.color">BLACK</prop>
						<!-- 干扰线 背景渐变颜色 从左侧向右渐变 -->
						<prop key="kaptcha.background.clear.from">green</prop>
						<!-- 干扰线 背景渐变颜色 从右侧向左渐变 -->
						<prop key="kaptcha.background.clear.to">yellow</prop>
						<prop key="kaptcha.session.key">code</prop>
                        <!-- 验证码的效果，水纹 -->
                        <prop key="kaptcha.obscurificator.impl">com.google.code.kaptcha.impl.WaterRipple</prop>
					</props>
				</constructor-arg>
			</bean>
		</property>
	</bean>

	<!-- 国际化的消息资源文件 -->
	<!-- <bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource"> 
		<property name="basenames"> <list> 在web环境中一定要定位到classpath 否则默认到当前web应用下找 
		<value>classpath:com/avicit/resource/message/messages</value> </list> </property> 
		<property name="defaultEncoding" value="UTF-8"/> <property name="cacheSeconds" 
		value="60"/> </bean> -->

</beans>